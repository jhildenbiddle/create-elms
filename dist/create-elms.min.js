/*!
 * create-elms
 * v1.0.9
 * https://github.com/jhildenbiddle/create-elms
 * (c) 2018-2019 John Hildenbiddle <http://hildenbiddle.com>
 * MIT license
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).createElms=t()}(this,function(){"use strict";function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:window.document,o=[];function i(e){var t=[];return e.nodeType?t=[e]:"string"==typeof e?t=Array.apply(null,r.querySelectorAll(e)):Array.isArray(e)?(t=e.map(function(e){return i(e)}),t=Array.prototype.concat.apply([],t)):e.length&&(t=Array.apply(null,e)),t}return(Array.isArray(t)?t:[t]).forEach(function(t){var f=r.createElement("div"),u=t&&"string"==typeof t,c=u?n:function t(){for(var n=function(t){return t&&"object"===e(t)},r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return o.reduce(function(e,r){return Object.keys(r).forEach(function(o){var i=e[o],f=r[o];n(i)&&n(f)?e[o]=t(i,f):e[o]=f}),e},{})}(n,t);if(u)f.innerHTML=t;else if(c.tag){var a=r.createElement(c.tag);f.appendChild(a)}Array.apply(null,f.children).forEach(function(e){!(e.textContent.length||e.children.length)&&(c.html?e.innerHTML=c.html:c.text&&(e.textContent=c.text)),c.attr&&Object.keys(c.attr).forEach(function(t){e.setAttribute(t,c.attr[t])}),c.appendTo?i(c.appendTo).forEach(function(t,n,r){var i=r.length>1?e.cloneNode(!0):e;o.push(t.appendChild(i))}):c.prependTo?i(c.prependTo).forEach(function(t,n,r){var i=r.length>1?e.cloneNode(!0):e;o.push(t.insertBefore(i,t.firstChild))}):c.insertBefore?i(c.insertBefore).forEach(function(t,n,r){var i=r.length>1?e.cloneNode(!0):e;o.push(t.parentNode.insertBefore(i,t))}):c.insertAfter?i(c.insertAfter).forEach(function(t,n,r){var i=r.length>1?e.cloneNode(!0):e;o.push(t.parentNode.insertBefore(i,t.nextSibling))}):o.push(e)})}),n.returnHtml?o.map(function(e){return e.outerHTML}):o}});
//# sourceMappingURL=create-elms.min.js.map
