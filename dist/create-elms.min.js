/*!
 * create-elms
 * v1.0.9
 * https://github.com/jhildenbiddle/create-elms
 * (c) 2018-2021 John Hildenbiddle <http://hildenbiddle.com>
 * MIT license
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).createElms=t()}(this,(function(){"use strict";function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}function t(){for(var n=function(t){return t&&"object"===e(t)},r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return o.reduce((function(e,r){return Object.keys(r).forEach((function(o){var i=e[o],f=r[o];n(i)&&n(f)?e[o]=t(i,f):e[o]=f})),e}),{})}return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:window.document,o=[],i=Array.isArray(e)?e:[e];function f(e){var t=[];return e.nodeType?t=[e]:"string"==typeof e?t=Array.apply(null,r.querySelectorAll(e)):Array.isArray(e)?(t=e.map((function(e){return f(e)})),t=Array.prototype.concat.apply([],t)):e.length&&(t=Array.apply(null,e)),t}return i.forEach((function(e){var i=r.createElement("div"),l=e&&"string"==typeof e,u=l?n:t(n,e);if(l)i.innerHTML=e;else if(u.tag){var a=r.createElement(u.tag);i.appendChild(a)}Array.apply(null,i.children).forEach((function(e){!(e.textContent.length||e.children.length)&&(u.html?e.innerHTML=u.html:u.text&&(e.textContent=u.text)),u.attr&&Object.keys(u.attr).forEach((function(t){e.setAttribute(t,u.attr[t])})),u.appendTo?f(u.appendTo).forEach((function(t,n,r){var i=r.length>1?e.cloneNode(!0):e;o.push(t.appendChild(i))})):u.prependTo?f(u.prependTo).forEach((function(t,n,r){var i=r.length>1?e.cloneNode(!0):e;o.push(t.insertBefore(i,t.firstChild))})):u.insertBefore?f(u.insertBefore).forEach((function(t,n,r){var i=r.length>1?e.cloneNode(!0):e;o.push(t.parentNode.insertBefore(i,t))})):u.insertAfter?f(u.insertAfter).forEach((function(t,n,r){var i=r.length>1?e.cloneNode(!0):e;o.push(t.parentNode.insertBefore(i,t.nextSibling))})):o.push(e)}))})),n.returnHtml?o.map((function(e){return e.outerHTML})):o}}));
//# sourceMappingURL=create-elms.min.js.map
