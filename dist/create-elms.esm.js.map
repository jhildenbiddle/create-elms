{"version":3,"file":"create-elms.esm.js","sources":["../src/merge-deep.js","../src/create-elms.js"],"sourcesContent":["// Functions\n// =============================================================================\n/**\n * Performs a deep merge of objects and returns new object. Does not modify\n * objects (immutable) and merges arrays via concatenation.\n *\n * @param {...object} objects - Objects to merge\n * @returns {object} New object with merged key/values\n */\nfunction mergeDeep(...objects) {\n    const isObject = obj => obj && typeof obj === 'object';\n\n    return objects.reduce((prev, obj) => {\n        Object.keys(obj).forEach(key => {\n            const pVal = prev[key];\n            const oVal = obj[key];\n\n            // if (Array.isArray(pVal) && Array.isArray(oVal)) {\n            //     prev[key] = pVal.concat(...oVal);\n            // }\n            if (isObject(pVal) && isObject(oVal)) {\n                prev[key] = mergeDeep(pVal, oVal);\n            }\n            else {\n                prev[key] = oVal;\n            }\n        });\n\n        return prev;\n    }, {});\n}\n\n\n// Export\n// =============================================================================\nexport default mergeDeep;\n","// Dependencies\n// =============================================================================\nimport mergeDeep from './merge-deep';\n\n\n// Functions\n// =============================================================================\n/**\n * Creates new elements and optionally adds them to the DOM.\n *\n * @preserve\n * @param {string|createElmsOptions} elmData - Data used to render and/or return\n * array of elements. Accepts a string, object, and an array of strings or\n * objects.\n * @param {createElmsOptions} [sharedOptions={}] - Shared options object. The\n * 'attr', 'html' and 'text' options will be shared with all elmData objects and\n * strings but will not override existing attributes or html/text content. Note\n * that for elmData strings the 'tag' option is ignored and all other shared\n * options will be applied to top-level elements only (not nested elements).\n * @example\n *\n *   // Single element as HTML string\n *   createElms('<p class=\"myclass\">Text</p>');\n *\n *   // Single element as object\n *   createElms({\n *     tag : 'p',\n *     attr: { class: 'myclass' },\n *     text: 'Text'\n *   });\n *\n * @example\n *\n *   // Multiple elements as HTML string\n *   createElms(`\n *     <p class=\"myclass\">Text1</p>\n *     <p class=\"myclass\"><a href=\"page.html\">Link</a></p>\n *   `);\n *\n *   // Multiple elements as array of HTML string\n *   createElms([\n *     '<p class=\"myclass\">Text</p>',\n *     '<p class=\"myclass\"><a href=\"page.html\">Link</a></p>'\n *   ]);\n *\n *   // Multiple elements as array of objects\n *   createElms([\n *     {\n *       tag : 'p',\n *       attr: { class: 'myclass' },\n *       text: 'Text'\n *     },\n *     {\n *       tag : 'p',\n *       attr: { class: 'myclass' },\n *       html: '<a href=\"page.html\">Link</a>'\n *     }\n *   ]);\n *\n * @example\n *\n *   // Multiple elements as array of objects with shared options\n *   createElms([\n *     { text: 'Text' }\n *     { html: '<a href=\"page.html\">Link</a>' }\n *   ], {\n *     tag     : 'p',\n *     attr    : { class: 'myclass' },\n *     appendTo: 'body'\n *   });\n */\n/**\n * @typedef createElmsOptions\n * @type {object}\n * @property {string} [options.tag] - The HTML tag\n * @property {string} [options.html] - Content to append to tag as HTML\n * @property {string} [options.text] - Content to append to tag as text\n * @property {object} [options.attr] - Tag attributes (key/value pairs)\n * @property {object|string} [options.appendTo] - The node(s) to append element(s) to\n * @property {object|string} [options.prependTo] - The node(s) to prepend element(s) to\n * @property {object|string} [options.insertBefore] - The node(s) to insert element(s) before\n * @property {object|string} [options.insertAfter] - The node(s) to insert element(s) after\n */\nfunction createElms(elmData, sharedOptions = {}, document = window.document) {\n    const elmArray  = [];\n    const dataArray = Array.isArray(elmData) ? elmData : [elmData];\n\n    // Returns a flattened array of element(s) when passed a string, Element,\n    // HTMLCollection, NodeList, or Array of aforementioned types.\n    function getElms(elms) {\n        let elmArray = [];\n\n        // Element\n        if (elms.nodeType) {\n            elmArray = [elms];\n        }\n        // CSS selector\n        else if (typeof elms === 'string') {\n            elmArray = [...document.querySelectorAll(elms)];\n        }\n        // Array\n        else if (Array.isArray(elms)) {\n            // Convert CSS selectors, HTMLCollections, and NodeLists to arrays\n            elmArray = elms.map(elm => getElms(elm));\n\n            // Flatten arrays\n            elmArray = Array.prototype.concat(...elmArray);\n        }\n        // HTMLCollection or NodeList\n        else if (elms.length) {\n            elmArray = [...elms];\n        }\n\n        return elmArray;\n    }\n\n    dataArray.forEach(data => {\n        const fragment = document.createElement('div');\n        const isString = data && typeof data === 'string';\n        const settings = isString ? sharedOptions : mergeDeep(sharedOptions, data);\n\n        // String\n        if (isString) {\n            fragment.innerHTML = data;\n        }\n        // Object with tag defined\n        else if (settings.tag) {\n            const elm = document.createElement(settings.tag);\n            fragment.appendChild(elm);\n        }\n\n        // A loop is required to handle data strings with multiple elements\n        [...fragment.children].forEach(elm => {\n            const isEmpty = !(elm.textContent.length || elm.children.length);\n\n            // HTML / Text\n            if (isEmpty) {\n                if (settings.html) {\n                    elm.innerHTML = settings.html;\n                }\n                else if (settings.text) {\n                    elm.textContent = settings.text;\n                }\n            }\n\n            // Attributes\n            if (settings.attr) {\n                Object.keys(settings.attr).forEach(key => {\n                    elm.setAttribute(key, settings.attr[key]);\n                });\n            }\n\n            // Add to element\n            if (settings.appendTo) {\n                getElms(settings.appendTo).forEach((toElm, i, arr) => {\n                    const addElm = arr.length > 1 ? elm.cloneNode(true) : elm;\n                    elmArray.push(toElm.appendChild(addElm));\n                });\n            }\n            else if (settings.prependTo) {\n                getElms(settings.prependTo).forEach((toElm, i, arr) => {\n                    const addElm = arr.length > 1 ? elm.cloneNode(true) : elm;\n                    elmArray.push(toElm.insertBefore(addElm, toElm.firstChild));\n                });\n            }\n            else if (settings.insertBefore) {\n                getElms(settings.insertBefore).forEach((beforeNode, i, arr) => {\n                    const addElm = arr.length > 1 ? elm.cloneNode(true) : elm;\n                    elmArray.push(beforeNode.parentNode.insertBefore(addElm, beforeNode));\n                });\n            }\n            else if (settings.insertAfter) {\n                getElms(settings.insertAfter).forEach((afterNode, i, arr) => {\n                    const addElm = arr.length > 1 ? elm.cloneNode(true) : elm;\n                    elmArray.push(afterNode.parentNode.insertBefore(addElm, afterNode.nextSibling));\n                });\n            }\n            else {\n                elmArray.push(elm);\n            }\n        });\n    });\n\n    return sharedOptions.returnHtml ? elmArray.map(elm => elm.outerHTML) : elmArray;\n}\n\n\n// Export\n// =============================================================================\nexport default createElms;\n"],"names":["mergeDeep","isObject","obj","objects","reduce","prev","keys","forEach","pVal","key","oVal","createElms","elmData","sharedOptions","document","window","elmArray","dataArray","Array","isArray","getElms","elms","nodeType","querySelectorAll","map","elm","prototype","concat","length","fragment","createElement","isString","data","settings","innerHTML","tag","appendChild","children","isEmpty","textContent","html","text","attr","setAttribute","appendTo","toElm","i","arr","addElm","cloneNode","push","prependTo","insertBefore","firstChild","beforeNode","parentNode","insertAfter","afterNode","nextSibling","returnHtml","outerHTML"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AASA,SAASA;QACCC,WAAW,SAAXA;eAAkBC,eAAcA,4CAAAA,UAAQ;;sCAD5BC;;;WAGXA,QAAQC,OAAO,SAACC,MAAMH;eAClBI,KAAKJ,KAAKK,QAAQ;gBACfC,OAAOH,KAAKI;gBACZC,OAAOR,IAAIO;gBAKbR,SAASO,SAASP,SAASS,OAAO;qBAC7BD,OAAOT,UAAUQ,MAAME;mBAE3B;qBACID,OAAOC;;;eAIbL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GCuDf,UAASM,WAAWC;QAASC;QAAoBC,+EAAWC,OAAOD;QACzDE;QACAC,YAAYC,MAAMC,QAAQP,WAAWA,YAAWA;aAI7CQ,QAAQC;YACTL;YAGAK,KAAKC,UAAU;yBACHD;eAGX,WAAWA,SAAS,UAAU;mDAChBP,SAASS,iBAAiBF;eAGxC,IAAIH,MAAMC,QAAQE,OAAO;;uBAEfA,KAAKG,IAAI;uBAAOJ,QAAQK;;iDAGlBC,WAAUC,iDAAUX;eAGpC,IAAIK,KAAKO,QAAQ;mDACHP;;eAGZL;;cAGDT,QAAQ;YACRsB,WAAWf,SAASgB,cAAc;YAClCC,WAAWC,eAAeA,SAAS;YACnCC,WAAWF,WAAWlB,gBAAgBb,UAAUa,eAAemB;YAGjED,UAAU;qBACDG,YAAYF;eAGpB,IAAIC,SAASE,KAAK;gBACbV,MAAMX,SAASgB,cAAcG,SAASE;qBACnCC,YAAYX;;oCAIrBI,SAASQ,WAAU9B,QAAQ;gBACrB+B,YAAYb,IAAIc,YAAYX,UAAUH,IAAIY,SAAST;gBAGrDU,SAAS;oBACLL,SAASO,MAAM;wBACXN,YAAYD,SAASO;uBAExB,IAAIP,SAASQ,MAAM;wBAChBF,cAAcN,SAASQ;;;gBAK/BR,SAASS,MAAM;uBACRpC,KAAK2B,SAASS,MAAMnC,QAAQ;wBAC3BoC,aAAalC,KAAKwB,SAASS,KAAKjC;;;gBAKxCwB,SAASW,UAAU;wBACXX,SAASW,UAAUrC,QAAQ,SAACsC,OAAOC,GAAGC;wBACpCC,SAASD,IAAInB,SAAS,IAAIH,IAAIwB,UAAU,QAAQxB;6BAC7CyB,KAAKL,MAAMT,YAAYY;;mBAGnC,IAAIf,SAASkB,WAAW;wBACjBlB,SAASkB,WAAW5C,QAAQ,SAACsC,OAAOC,GAAGC;wBACrCC,SAASD,IAAInB,SAAS,IAAIH,IAAIwB,UAAU,QAAQxB;6BAC7CyB,KAAKL,MAAMO,aAAaJ,QAAQH,MAAMQ;;mBAGlD,IAAIpB,SAASmB,cAAc;wBACpBnB,SAASmB,cAAc7C,QAAQ,SAAC+C,YAAYR,GAAGC;wBAC7CC,SAASD,IAAInB,SAAS,IAAIH,IAAIwB,UAAU,QAAQxB;6BAC7CyB,KAAKI,WAAWC,WAAWH,aAAaJ,QAAQM;;mBAG5D,IAAIrB,SAASuB,aAAa;wBACnBvB,SAASuB,aAAajD,QAAQ,SAACkD,WAAWX,GAAGC;wBAC3CC,SAASD,IAAInB,SAAS,IAAIH,IAAIwB,UAAU,QAAQxB;6BAC7CyB,KAAKO,UAAUF,WAAWH,aAAaJ,QAAQS,UAAUC;;mBAGrE;yBACQR,KAAKzB;;;;WAKnBZ,cAAc8C,aAAa3C,SAASQ,IAAI;eAAOC,IAAImC;SAAa5C;;;"}