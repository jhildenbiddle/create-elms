{"version":3,"file":"create-elms.min.js","sources":["../src/create-elms.js","../src/merge-deep.js"],"sourcesContent":["// Dependencies\n// =============================================================================\nimport mergeDeep from './merge-deep';\n\n\n// Functions\n// =============================================================================\n/**\n * Creates new elements and optionally adds them to the DOM.\n *\n * @param {string|createElmsOptions} elmData - Data used to render and/or return\n * array of elements. Accepts a string, object, and an array of strings or\n * objects.\n * @param {createElmsOptions} [sharedOptions={}] - Shared options object. The\n * 'attr', 'html' and 'text' options will be shared with all elmData objects and\n * strings but will not override existing attributes or html/text content. Note\n * that for elmData strings the 'tag' option is ignored and all other shared\n * options will be applied to top-level elements only (not nested elements).\n * @example\n *\n *   // Single element as HTML string\n *   createElms('<p class=\"myclass\">Text</p>');\n *\n *   // Single element as object\n *   createElms({\n *     tag : 'p',\n *     attr: { class: 'myclass' },\n *     text: 'Text'\n *   });\n *\n * @example\n *\n *   // Multiple elements as HTML string\n *   createElms(`\n *     <p class=\"myclass\">Text1</p>\n *     <p class=\"myclass\"><a href=\"page.html\">Link</a></p>\n *   `);\n *\n *   // Multiple elements as array of HTML string\n *   createElms([\n *     '<p class=\"myclass\">Text</p>',\n *     '<p class=\"myclass\"><a href=\"page.html\">Link</a></p>'\n *   ]);\n *\n *   // Multiple elements as array of objects\n *   createElms([\n *     {\n *       tag : 'p',\n *       attr: { class: 'myclass' },\n *       text: 'Text'\n *     },\n *     {\n *       tag : 'p',\n *       attr: { class: 'myclass' },\n *       html: '<a href=\"page.html\">Link</a>'\n *     }\n *   ]);\n *\n * @example\n *\n *   // Multiple elements as array of objects with shared options\n *   createElms([\n *     { text: 'Text' }\n *     { html: '<a href=\"page.html\">Link</a>' }\n *   ], {\n *     tag     : 'p',\n *     attr    : { class: 'myclass' },\n *     appendTo: 'body'\n *   });\n */\n/**\n * @typedef createElmsOptions\n * @type {object}\n * @property {string} [options.tag] - The HTML tag\n * @property {object} [options.attr] - Tag attributes (key/value pairs)\n * @property {string} [options.text] - Content to append to tag as text\n * @property {string} [options.html] - Content to append to tag as HTML\n * @property {object|string} [options.appendTo] - The node(s) to append element(s) to\n * @property {object|string} [options.prependTo] - The node(s) to prepend element(s) to\n * @property {object|string} [options.insertBefore] - The node(s) to insert element(s) before\n * @property {object|string} [options.insertAfter] - The node(s) to insert element(s) after\n */\nfunction createElms(elmData, sharedOptions = {}, document = window.document) {\n    const elmArray  = [];\n    const dataArray = Array.isArray(elmData) ? elmData : [elmData];\n\n    // Returns an array of elements when passed a string, NodeList,\n    // HTMLCollection, or individual element.\n    function getElms(selectorElmsOrNodes) {\n        const elms = Array.isArray(selectorElmsOrNodes) ? selectorElmsOrNodes : typeof selectorElmsOrNodes === 'string' ? [...document.querySelectorAll(selectorElmsOrNodes)] : selectorElmsOrNodes.length ? [...selectorElmsOrNodes] : [selectorElmsOrNodes];\n\n        return [...elms].filter(elm => elm);\n    }\n\n    dataArray.forEach(data => {\n        const fragment = document.createElement('div');\n        const isString = data && typeof data === 'string';\n        const settings = isString ? sharedOptions : mergeDeep(sharedOptions, data);\n\n        // String\n        if (isString) {\n            fragment.innerHTML = data;\n        }\n        // Object with tag defined\n        else if (settings.tag) {\n            const elm = document.createElement(settings.tag);\n            fragment.appendChild(elm);\n        }\n\n        // A loop is required to handle data strings with multiple elements\n        [...fragment.children].forEach(elm => {\n            const isEmpty = !(elm.textContent.length || elm.children.length);\n\n            // HTML / Text\n            if (isEmpty) {\n                if (settings.html) {\n                    elm.innerHTML = settings.html;\n                }\n                else if (settings.text) {\n                    elm.textContent = settings.text;\n                }\n            }\n\n            // Attributes\n            if (settings.attr) {\n                Object.keys(settings.attr).forEach(key => {\n                    elm.setAttribute(key, settings.attr[key]);\n                });\n            }\n\n            // Add to element\n            if (settings.appendTo) {\n                getElms(settings.appendTo).forEach((toElm, i, arr) => {\n                    const addElm = arr.length > 1 ? elm.cloneNode(true) : elm;\n                    elmArray.push(toElm.appendChild(addElm));\n                });\n            }\n            else if (settings.prependTo) {\n                getElms(settings.prependTo).forEach((toElm, i, arr) => {\n                    const addElm = arr.length > 1 ? elm.cloneNode(true) : elm;\n                    elmArray.push(toElm.insertBefore(addElm, toElm.firstChild));\n                });\n            }\n            else if (settings.insertBefore) {\n                getElms(settings.insertBefore).forEach((beforeNode, i, arr) => {\n                    const addElm = arr.length > 1 ? elm.cloneNode(true) : elm;\n                    elmArray.push(beforeNode.parentNode.insertBefore(addElm, beforeNode));\n                });\n            }\n            else if (settings.insertAfter) {\n                getElms(settings.insertAfter).forEach((afterNode, i, arr) => {\n                    const addElm = arr.length > 1 ? elm.cloneNode(true) : elm;\n                    elmArray.push(afterNode.parentNode.insertBefore(addElm, afterNode.nextSibling));\n                });\n            }\n            else {\n                elmArray.push(elm);\n            }\n        });\n    });\n\n    return sharedOptions.returnHtml ? elmArray.map(elm => elm.outerHTML) : elmArray;\n}\n\n\n// Export\n// =============================================================================\nexport default createElms;\n","// Functions\n// =============================================================================\n/**\n * Performs a deep merge of objects and returns new object. Does not modify\n * objects (immutable) and merges arrays via concatenation.\n *\n * @param {...object} objects - Objects to merge\n * @returns {object} New object with merged key/values\n */\nfunction mergeDeep(...objects) {\n    const isObject = obj => obj && typeof obj === 'object';\n\n    return objects.reduce((prev, obj) => {\n        Object.keys(obj).forEach(key => {\n            const pVal = prev[key];\n            const oVal = obj[key];\n\n            // if (Array.isArray(pVal) && Array.isArray(oVal)) {\n            //     prev[key] = pVal.concat(...oVal);\n            // }\n            if (isObject(pVal) && isObject(oVal)) {\n                prev[key] = mergeDeep(pVal, oVal);\n            }\n            else {\n                prev[key] = oVal;\n            }\n        });\n\n        return prev;\n    }, {});\n}\n\n\n// Export\n// =============================================================================\nexport default mergeDeep;\n"],"names":["elmData","sharedOptions","document","window","elmArray","getElms","selectorElmsOrNodes","elms","Array","isArray","querySelectorAll","length","filter","elm","forEach","fragment","createElement","isString","data","settings","mergeDeep","isObject","obj","objects","reduce","prev","keys","pVal","key","oVal","innerHTML","tag","appendChild","children","textContent","html","text","attr","setAttribute","appendTo","toElm","i","arr","addElm","cloneNode","push","prependTo","insertBefore","firstChild","beforeNode","parentNode","insertAfter","afterNode","nextSibling","returnHtml","map","outerHTML"],"mappings":";;;;;;;sgBAkFA,SAAoBA,OAASC,4DAAoBC,yDAAWC,OAAOD,SACzDE,cAKGC,EAAQC,OACPC,EAAOC,MAAMC,QAAQH,GAAuBA,EAAqD,iBAAxBA,cAAuCJ,EAASQ,iBAAiBJ,KAAwBA,EAAoBK,mBAAaL,KAAwBA,qBAEtNC,IAAMK,OAAO,mBAAOC,WAPjBL,MAAMC,QAAQT,GAAWA,GAAWA,IAU5Cc,QAAQ,gBACRC,EAAWb,EAASc,cAAc,OAClCC,EAAWC,GAAwB,iBAATA,EAC1BC,EAAWF,EAAWhB,ECxFpC,SAASmB,YACCC,EAAW,mBAAOC,GAAsB,qBAARA,gBAAAA,wBADpBC,gDAGXA,EAAQC,OAAO,SAACC,EAAMH,iBAClBI,KAAKJ,GAAKR,QAAQ,gBACfa,EAAOF,EAAKG,GACZC,EAAOP,EAAIM,GAKbP,EAASM,IAASN,EAASQ,KACtBD,GAAOR,EAAUO,EAAME,KAGvBD,GAAOC,IAIbJ,ODqEqCL,CAAUnB,EAAeiB,MAGjED,IACSa,UAAYZ,OAGpB,GAAIC,EAASY,IAAK,KACblB,EAAMX,EAASc,cAAcG,EAASY,OACnCC,YAAYnB,eAIrBE,EAASkB,WAAUnB,QAAQ,cACTD,EAAIqB,YAAYvB,QAAUE,EAAIoB,SAAStB,UAIjDQ,EAASgB,OACLL,UAAYX,EAASgB,KAEpBhB,EAASiB,SACVF,YAAcf,EAASiB,OAK/BjB,EAASkB,aACFX,KAAKP,EAASkB,MAAMvB,QAAQ,cAC3BwB,aAAaV,EAAKT,EAASkB,KAAKT,MAKxCT,EAASoB,WACDpB,EAASoB,UAAUzB,QAAQ,SAAC0B,EAAOC,EAAGC,OACpCC,EAASD,EAAI/B,OAAS,EAAIE,EAAI+B,WAAU,GAAQ/B,IAC7CgC,KAAKL,EAAMR,YAAYW,MAG/BxB,EAAS2B,YACN3B,EAAS2B,WAAWhC,QAAQ,SAAC0B,EAAOC,EAAGC,OACrCC,EAASD,EAAI/B,OAAS,EAAIE,EAAI+B,WAAU,GAAQ/B,IAC7CgC,KAAKL,EAAMO,aAAaJ,EAAQH,EAAMQ,eAG9C7B,EAAS4B,eACN5B,EAAS4B,cAAcjC,QAAQ,SAACmC,EAAYR,EAAGC,OAC7CC,EAASD,EAAI/B,OAAS,EAAIE,EAAI+B,WAAU,GAAQ/B,IAC7CgC,KAAKI,EAAWC,WAAWH,aAAaJ,EAAQM,MAGxD9B,EAASgC,cACNhC,EAASgC,aAAarC,QAAQ,SAACsC,EAAWX,EAAGC,OAC3CC,EAASD,EAAI/B,OAAS,EAAIE,EAAI+B,WAAU,GAAQ/B,IAC7CgC,KAAKO,EAAUF,WAAWH,aAAaJ,EAAQS,EAAUC,kBAI7DR,KAAKhC,OAKnBZ,EAAcqD,WAAalD,EAASmD,IAAI,mBAAO1C,EAAI2C,YAAapD"}